% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Tue Dec 30 22:01:00 GMT 2014
% Script adapted by Georgina Cosma 
%<publication title> Prediction of Pathological Stage in Patients with Prostate Cancer: A Neuro-Fuzzy Model

[m,n]=size(training_data);
InputForAnn=[training_data; testing_data];
TargetForAnn=[training_data(:,n); testing_data(:,n)];
[pstageANN] = ANNbinouts(TargetForAnn)
inputs = InputForAnn(:,1:n-1)';
targets = pstageANN';

trainInd = 1:1:266;
testInd = 267:1:399;

[trainP,valP,testP] = divideind(inputs,trainInd,testInd);
[trainT,valT,testT] = divideind(targets,trainInd,testInd);

% Create a Pattern Recognition Network
hiddenLayerSize = 5;
net = patternnet(hiddenLayerSize);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
 net.inputs{1}.processFcns = {'removeconstantrows','mapminmax'};
 net.outputs{2}.processFcns = {'removeconstantrows','mapminmax'};

%setdemorandstream(491218382)

 net.divideFcn = 'divideind'; 
 net.divideParam.trainInd=trainInd;
 net.divideParam.testInd=testInd;
 net.trainParam.epochs=200;
 
 %net.trainParam.goal = 0.000001;
 %net.trainParam.goal = 1e-5;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'mse';  % Mean squared error

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
  'plotregression', 'plotfit'};

% Train the Network
%trainoss is a network training function that updates weight and 
%bias values according to the one-step secant method.
%trainbfg is a network training function that updates weight and 
%bias values according to the BFGS quasi-Newton method

[net,tr] = trainscg(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% Recalculate Training, Validation and Test Performance
trainTargets = targets .* tr.trainMask{1};
testTargets = targets  .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,outputs);
testPerformance = perform(net,testTargets,outputs);

% View the Network
view(net)

trOut = outputs(tr.trainInd);
tsOut = outputs(tr.testInd);
trTarg = targets(tr.trainInd);
tsTarg = targets(tr.testInd);

troutbin=ANNbinouts(trOut');
tsoutbin=ANNbinouts(tsOut');
trTargbin=ANNbinouts(trTarg');
tsTargbin=ANNbinouts(tsTarg');

figure,plotconfusion(trTarg,trOut)
figure,plotconfusion(tsTarg,tsOut)

figure; hold on

%class 2 is the extra-prostatic class
[XANN,YANN,TANN,AUCANN,OPTROCPTANN] = perfcurve(tsoutbin(:,2)',tsTargbin(:,2)',1); 
plot(XANN,YANN, 'Color','green')
xlabel('False positive rate'); ylabel('True positive rate')
title('ROC for classification by ANN Modelling')
legend('ANN')


[c,order] = confusion(tsoutbin(:,2)',tsTargbin(:,2)');

